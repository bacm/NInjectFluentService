//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tests.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddFoldRequest", Namespace="http://schemas.datacontract.org/2004/07/Absenteeismbe.Model")]
    [System.SerializableAttribute()]
    public partial class AddFoldRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PersonIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime End {
            get {
                return this.EndField;
            }
            set {
                if ((this.EndField.Equals(value) != true)) {
                    this.EndField = value;
                    this.RaisePropertyChanged("End");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PersonId {
            get {
                return this.PersonIdField;
            }
            set {
                if ((this.PersonIdField.Equals(value) != true)) {
                    this.PersonIdField = value;
                    this.RaisePropertyChanged("PersonId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Start {
            get {
                return this.StartField;
            }
            set {
                if ((this.StartField.Equals(value) != true)) {
                    this.StartField = value;
                    this.RaisePropertyChanged("Start");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IAbsenteeismbeService", CallbackContract=typeof(Tests.ServiceReference1.IAbsenteeismbeServiceCallback))]
    public interface IAbsenteeismbeService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAbsenteeismbeService/AddAbsence", ReplyAction="http://tempuri.org/IAbsenteeismbeService/AddAbsenceResponse")]
        Tests.ServiceReference1.AddAbsenceResponse AddAbsence(Tests.ServiceReference1.AddAbsenceRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAbsenteeismbeService/AddAbsence", ReplyAction="http://tempuri.org/IAbsenteeismbeService/AddAbsenceResponse")]
        System.IAsyncResult BeginAddAbsence(Tests.ServiceReference1.AddAbsenceRequest request, System.AsyncCallback callback, object asyncState);
        
        Tests.ServiceReference1.AddAbsenceResponse EndAddAbsence(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAbsenteeismbeServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAbsenteeismbeService/OnCallback", ReplyAction="http://tempuri.org/IAbsenteeismbeService/OnCallbackResponse")]
        Tests.ServiceReference1.OnCallbackResponse OnCallback(Tests.ServiceReference1.OnCallbackSolicit request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAbsenteeismbeService/OnCallback", ReplyAction="http://tempuri.org/IAbsenteeismbeService/OnCallbackResponse")]
        System.IAsyncResult BeginOnCallback(Tests.ServiceReference1.OnCallbackSolicit request, System.AsyncCallback callback, object asyncState);
        
        Tests.ServiceReference1.OnCallbackResponse EndOnCallback(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddAbsence", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class AddAbsenceRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public Tests.ServiceReference1.AddFoldRequest request;
        
        public AddAbsenceRequest() {
        }
        
        public AddAbsenceRequest(Tests.ServiceReference1.AddFoldRequest request) {
            this.request = request;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddAbsenceResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class AddAbsenceResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string AddAbsenceResult;
        
        public AddAbsenceResponse() {
        }
        
        public AddAbsenceResponse(string AddAbsenceResult) {
            this.AddAbsenceResult = AddAbsenceResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="OnCallback", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class OnCallbackSolicit {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string status;
        
        public OnCallbackSolicit() {
        }
        
        public OnCallbackSolicit(string status) {
            this.status = status;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="OnCallbackResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class OnCallbackResponse {
        
        public OnCallbackResponse() {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAbsenteeismbeServiceChannel : Tests.ServiceReference1.IAbsenteeismbeService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddAbsenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddAbsenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Tests.ServiceReference1.AddAbsenceResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Tests.ServiceReference1.AddAbsenceResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AbsenteeismbeServiceClient : System.ServiceModel.DuplexClientBase<Tests.ServiceReference1.IAbsenteeismbeService>, Tests.ServiceReference1.IAbsenteeismbeService {
        
        private BeginOperationDelegate onBeginAddAbsenceDelegate;
        
        private EndOperationDelegate onEndAddAbsenceDelegate;
        
        private System.Threading.SendOrPostCallback onAddAbsenceCompletedDelegate;
        
        public AbsenteeismbeServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public AbsenteeismbeServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public AbsenteeismbeServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AbsenteeismbeServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AbsenteeismbeServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public event System.EventHandler<AddAbsenceCompletedEventArgs> AddAbsenceCompleted;
        
        public Tests.ServiceReference1.AddAbsenceResponse AddAbsence(Tests.ServiceReference1.AddAbsenceRequest request) {
            return base.Channel.AddAbsence(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddAbsence(Tests.ServiceReference1.AddAbsenceRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddAbsence(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Tests.ServiceReference1.AddAbsenceResponse EndAddAbsence(System.IAsyncResult result) {
            return base.Channel.EndAddAbsence(result);
        }
        
        private System.IAsyncResult OnBeginAddAbsence(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Tests.ServiceReference1.AddAbsenceRequest request = ((Tests.ServiceReference1.AddAbsenceRequest)(inValues[0]));
            return this.BeginAddAbsence(request, callback, asyncState);
        }
        
        private object[] OnEndAddAbsence(System.IAsyncResult result) {
            Tests.ServiceReference1.AddAbsenceResponse retVal = this.EndAddAbsence(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddAbsenceCompleted(object state) {
            if ((this.AddAbsenceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddAbsenceCompleted(this, new AddAbsenceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddAbsenceAsync(Tests.ServiceReference1.AddAbsenceRequest request) {
            this.AddAbsenceAsync(request, null);
        }
        
        public void AddAbsenceAsync(Tests.ServiceReference1.AddAbsenceRequest request, object userState) {
            if ((this.onBeginAddAbsenceDelegate == null)) {
                this.onBeginAddAbsenceDelegate = new BeginOperationDelegate(this.OnBeginAddAbsence);
            }
            if ((this.onEndAddAbsenceDelegate == null)) {
                this.onEndAddAbsenceDelegate = new EndOperationDelegate(this.OnEndAddAbsence);
            }
            if ((this.onAddAbsenceCompletedDelegate == null)) {
                this.onAddAbsenceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddAbsenceCompleted);
            }
            base.InvokeAsync(this.onBeginAddAbsenceDelegate, new object[] {
                        request}, this.onEndAddAbsenceDelegate, this.onAddAbsenceCompletedDelegate, userState);
        }
    }
}
